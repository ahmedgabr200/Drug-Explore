{"version":3,"sources":["stores/DataService.ts","Const.ts","stores/actions.ts","stores/reducer.ts","stores/index.tsx","helpers/color.ts","helpers/text.ts","helpers/icon.tsx","helpers/index.ts","components/CardContainer/Scatter.tsx","components/CardContainer/lasso.js","components/CardContainer/index.tsx","components/TabContainer/AttentionTree.tsx","components/TabContainer/Graph.tsx","components/TabContainer/PathMatrix.tsx","components/TabContainer/index.tsx","components/Sider/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["axiosInstance","axios","create","baseURL","withCredentials","headers","requestNodeTypes","a","get","response","data","requestEdgeTypes","requestNodeNameDict","requestAttentionPair","diseaseID","drugID","url","requestDiseaseOptions","requestDrugPredictions","predictions","metapathSummary","metapath_summary","requestEmbedding","ACTION_TYPES","selectDrug","selectedDrug","selectedDisease","isAdd","dispatch","modifyAttentionPaths","changeDrug","undefined","type","payload","isAttentionLoading","then","res","attention","metaPathGroups","groupMetaPaths","metapaths","metaPaths","groups","groupDict","forEach","metaPath","hide","nodeTypeString","nodes","map","d","nodeType","join","groupIdx","indexOf","push","nodeTypes","toggleDrugSelection","drugPredictions","selected","id","isAddDrug","filter","includes","rootReducer","state","action","metaPathSummary","idx","diseaseOptions","edgeTypes","nodeNameDict","selectedPathNodes","edgeThreshold","JSON","parse","stringify","initialState","isDrugLoading","isDiseaseLoading","GlobalStore","createContext","StateProvider","props","React","useReducer","dispatchBase","useCallback","asyncer","Provider","value","children","StateConsumer","Component","Consumer","context","globalState","COLORS","colorDict","getNodeColor","Object","keys","length","cropText","text","fontSize","maxWidth","fontWeight","returnText","document","createElement","getContext","font","width","measureText","i","prevText","substr","concat","currText","prevWidth","currWidth","LOADING_ICON","textAnchor","x","y","height","fill","attributeType","attributeName","values","begin","dur","repeatCount","pruneEdge","node","threshold","score","circleRadius","hoverTimeout","WAIT","embedding","tooltip","visible","info","position","onChangeDrug","bind","this","setState","loadEmbedding","selectedDrugIds","d3","remove","svg","lasso_area","mylasso","targetArea","items","closePathDistance","closePathSelect","isPathClosed","hoverSelect","on","start","draw","end","lasso","_this","tpath","origin","torigin","drawnCoords","g","append","attr","dyn_path","close_path","origin_node","dragAction","drag","e","__lasso","possible","loopSelect","box","getBoundingClientRect","lassoPoint","Math","round","left","top","selection","sourceEvent","touches","clientX","clientY","tx","ty","distance","sqrt","pow","close_draw_path","n","classifyPoint","call","_","arguments","possibleItems","selectedItems","notPossibleItems","notSelectedItems","types","selectAll","_groups","attributes","addLasso","xDomain","yDomain","xScale","domain","range","yScale","drugIds","sort","b","drugId","isHighlighted","isSelected","cx","cy","key","className","stroke","r","onDoubleClick","onClick","showTooltip","window","setTimeout","clearTimeout","style","opacity","drawScatter","transform","Container","TITLE_HEIGHT","MARGIN","PADDING","svgOuterHeight","size","title","margin","bodyStyle","padding","overflowY","headStyle","AttentionTree","nodeHeight","labelLength","midGap","nodeAttention","stepGap","nodeAttentionFiltered","rootNode","root","nodeSize","d3Tree","linkGene","source","target","maxScore","max","links","link","widthScale","edgeInfo","replace","nodeId","destroyTooltipOnHide","strokeWidth","allY","descendants","minY","min","nodeFullName","nodeShortName","getTextWidth","tooltipTitle","icon_path","mouseEnterDelay","cursor","content","heights","nodeKey","drawNodeAttentionHorizontal","selectedDrugs","drawSubgraph","graphHeight","ModelNodeForce","RADIUS","prevNodes","prevLinks","simulation","force","strength","radius","alphaMin","svgNodes","svgLinks","select","active","alpha","restart","fx","fy","desNodes","prevNode","find","desLinks","sourceData","targetData","drugIdx","getNodeLinks","enter","transition","delay","dragstarted","dragged","dragended","update","exit","classed","isTargetNode","textlabel","isHidden","ticked","drawGraph","prevProps","prevGroups","currGroups","currNodes","updateNodeLabel","reminderText","prop","EDGE_LENGTH","NODE_WIDTH","NODE_HEIGHT","VERTICAL_GAP","GROUP_GAP","COUNT_GAP","HEAD_HEIGHT","ICON_GAP","offsetY","expand","isModalVisible","showModal","hideModal","filterMetaPathGroups","flag","doesExist","toggleHideFunc","isHide","isPathSelected","headerNames","drug","name","COUNT_WIDTH","getCountWidth","maxCount","count","flat","rScale","allRows","summary","nodeIdx","translate","rx","edges","Array","edgeIdx","x1","y1","x2","y2","currentY","differentChildren","childrenOffsetY","showChildren","lastMetaPath","drugRank","drawChildrenPaths","childrenHeight","drawMetaCount","toggleExpand","getMetaIconGroup","toggleMetaPathHide","header","drawHeader","expandStatus","reduce","acc","cur","sum","vis","num","xlinkTitle","toString","prevPath","path","childIdx","nodeName","prevNodeName","prevNodeId","prevNodeType","shortNodeName","open","edge","edgeName","edgeShortName","getIconGroup","filteredMetaGroups","k","metaPathGroup","every","svgWidth","svgHeight","drawSummary","some","onOk","onCancel","okText","zIndex","TabPane","Tabs","titleHeight","activeTab","cardWidth","cardHeight","activeKey","backgroundColor","tabBarStyle","onChange","changeActiveTab","tab","Sider","Layout","Option","Select","listHeight","changeEdgeTHR","onChangeDisease","prevSelectedDrugs","currentDrug","selectDisease","siderWidth","theme","defaultValue","showSearch","optionFilterProp","label","mode","placeholder","drug_id","float","span","step","marginLeft","background","color","Header","Content","Footer","innerWidth","innerHeight","updateSize","addEventListener","setNodeColor","removeEventListener","mainViewWidth","mainViewHeight","NodeLinkHeight","MatrixHeight","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eb72353a.chunk.js","sourcesContent":["import axios from 'axios';\nimport { IEdgeTypes } from 'types';\nimport { SERVER_URL } from 'Const';\n\nconst axiosInstance = axios.create({\n  baseURL: `${SERVER_URL}/`,\n  // timeout: 1000,\n  withCredentials: false,\n  headers: {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS',\n  },\n});\n\nconst requestNodeTypes = async (): Promise<string[]> => {\n  const url = './data/node_types.json';\n  let response = await axiosInstance.get(url);\n  return response.data;\n};\n\nconst requestEdgeTypes = async (): Promise<IEdgeTypes> => {\n  const url = './data/edge_types.json';\n  let response = await axiosInstance.get(url);\n  return response.data;\n};\n\nconst requestNodeNameDict = async () => {\n  const url = './data/node_name_dict.json';\n  let response = await axiosInstance.get(url);\n  return response.data;\n};\n\nconst requestAttention = async (diseaseID: string, drugID: string) => {\n  const url = `./api/attention?disease=${diseaseID}&drug=${drugID}`;\n  let response = await axiosInstance.get(url);\n  return response.data;\n};\n\nconst requestAttentionPair = async (diseaseID: string, drugID: string) => {\n  const url = `./api/attention_pair?disease=${diseaseID}&drug=${drugID}`;\n  let response = await axiosInstance.get(url);\n  return response.data;\n};\n\nconst requestDiseaseOptions = async () => {\n  const url = './api/diseases';\n  let response = await axiosInstance.get(url);\n  return response.data;\n};\n\nconst requestDrugPredictions = async (diseaseID: string) => {\n  const url = `./api/drug_predictions?disease_id=${diseaseID}`;\n  const response = await axiosInstance.get(url);\n  const { predictions, metapath_summary: metapathSummary } = response.data;\n  return { predictions, metapathSummary };\n};\n\nconst requestEmbedding = async () => {\n  const url = './data/drug_tsne.json';\n  const response = await axiosInstance.get(url);\n  return response.data;\n};\n\nexport {\n  requestNodeTypes,\n  requestEdgeTypes,\n  requestAttention,\n  requestNodeNameDict,\n  requestDrugPredictions,\n  requestDiseaseOptions,\n  requestEmbedding,\n  requestAttentionPair,\n};\n","const STATIC_URL =\n  process.env.NODE_ENV === 'development'\n    ? `http://localhost:${process.env.REACT_APP_PORT}`\n    : './';\n\nconst SERVER_URL =\n  process.env.NODE_ENV === 'development' ? `http://localhost:8002` : './';\n\nexport { STATIC_URL, SERVER_URL };\n","import {\n  DrugPrediction,\n  IDispatch,\n  IMetaPath,\n  IMetaPathGroup,\n  IMetaPathSummary,\n} from 'types';\nimport {\n  requestAttentionPair,\n  requestDrugPredictions,\n} from 'stores/DataService';\n\nexport const ACTION_TYPES = {\n  Load_Node_Types: 'Load_Node_Types',\n  Load_Edge_Types: 'Load_Edge_Types',\n  Load_Meta_Paths: 'Load_Meta_Paths',\n  Add_Attention_Paths: 'Add_Attention_Paths',\n  Del_Attention_Paths: 'Del_Attention_Paths',\n  Load_Node_Name_Dict: 'Load_Node_Name_Dict',\n  Load_Drug_Options: 'Load_Drug_Options',\n  Load_Disease_Options: 'Load_Disease_Options',\n\n  Set_Loading_Status: 'Set_Loading_Status',\n\n  Change_Edge_THR: 'Change_Edge_THR',\n  Change_Drug: 'Change_Drug',\n  Change_Disease: 'Change_Disease',\n  Select_Path_Noes: 'Select_Path_Nodes',\n\n  Toggle_Meta_Path_Hide: 'Toggle_Meta_Path_Hide',\n};\n\nexport const selectDrug = (\n  selectedDrug: string,\n  selectedDisease: string | undefined,\n  isAdd: boolean,\n  dispatch: IDispatch\n) => {\n  if (selectedDisease) {\n    modifyAttentionPaths(selectedDrug, selectedDisease, isAdd, dispatch);\n    changeDrug(selectedDrug, dispatch);\n  }\n};\n\nexport const selectDisease = (selectedDisease: string, dispatch: IDispatch) => {\n  dispatch({\n    type: ACTION_TYPES.Set_Loading_Status,\n    payload: { isDrugLoading: true },\n  });\n\n  dispatch({\n    type: ACTION_TYPES.Change_Disease,\n    payload: { selectedDisease },\n  });\n\n  dispatch({\n    type: ACTION_TYPES.Change_Drug,\n    payload: { selectedDrug: undefined },\n  });\n\n  requestDrugPredictions(selectedDisease)\n    .then((res) => {\n      const { predictions, metapathSummary: metaPathSummary } = res;\n      const drugPredictions = predictions.map((d: DrugPrediction) => {\n        return { ...d, selected: false };\n      });\n      dispatch({\n        type: ACTION_TYPES.Load_Drug_Options,\n        payload: { drugPredictions, metaPathSummary },\n      });\n    })\n    .then(() => {\n      dispatch({\n        type: ACTION_TYPES.Set_Loading_Status,\n        payload: { isDrugLoading: false },\n      });\n    });\n};\n\nconst modifyAttentionPaths = (\n  selectedDrug: string | undefined,\n  selectedDisease: string | undefined,\n  isAdd: boolean,\n  dispatch: IDispatch\n) => {\n  if (selectedDrug !== undefined && selectedDisease !== undefined) {\n    if (isAdd) {\n      dispatch({\n        type: ACTION_TYPES.Set_Loading_Status,\n        payload: { isAttentionLoading: true },\n      });\n\n      requestAttentionPair(selectedDisease, selectedDrug)\n        .then((res) => {\n          dispatch({\n            type: ACTION_TYPES.Add_Attention_Paths,\n            payload: {\n              attention: res.attention,\n              metaPathGroups: { [selectedDrug]: groupMetaPaths(res.metapaths) },\n            },\n          });\n        })\n        .then(() => {\n          dispatch({\n            type: ACTION_TYPES.Set_Loading_Status,\n            payload: { isAttentionLoading: false },\n          });\n        });\n    } else {\n      dispatch({\n        type: ACTION_TYPES.Del_Attention_Paths,\n        payload: {\n          selectedDrug,\n        },\n      });\n    }\n  }\n};\n\nconst changeDrug = (selectedDrug: string, dispatch: IDispatch) => {\n  dispatch({\n    type: ACTION_TYPES.Change_Drug,\n    payload: { selectedDrug },\n  });\n};\n\nconst groupMetaPaths = (metaPaths: IMetaPath[]): IMetaPathGroup[] => {\n  let groups: IMetaPathGroup[] = [];\n  let groupDict: string[] = [];\n  metaPaths.forEach((metaPath) => {\n    metaPath.hide = false; // initi, show all metapaths\n    const nodeTypeString = metaPath.nodes.map((d) => d.nodeType).join('_');\n    const groupIdx = groupDict.indexOf(nodeTypeString);\n    if (groupIdx > -1) {\n      groups[groupIdx].metaPaths.push(metaPath);\n    } else {\n      groupDict.push(nodeTypeString);\n      groups.push({\n        nodeTypes: metaPath.nodes.map((d) => d.nodeType),\n        metaPaths: [metaPath],\n      });\n    }\n  });\n  return groups;\n};\n\nexport const toggleMetaPathHide = (\n  metaPathSummary: IMetaPathSummary[],\n  idx: number,\n  hide: boolean,\n  dispatch: IDispatch\n) => {\n  metaPathSummary[idx]['hide'] = hide;\n  dispatch({\n    type: ACTION_TYPES.Toggle_Meta_Path_Hide,\n    payload: { metaPathSummary },\n  });\n};\n","import { IState, IAction, IMetaPathSummary } from 'types';\nimport { ACTION_TYPES } from 'stores/actions';\n\nconst rootReducer = (state: IState, action: IAction): IState => {\n  switch (action.type) {\n    case ACTION_TYPES.Load_Drug_Options:\n      return {\n        ...state,\n        drugPredictions: action.payload.drugPredictions,\n        metaPathSummary: action.payload.metaPathSummary.map(\n          (d: IMetaPathSummary, idx: number) => {\n            return { ...d, hide: false, idx };\n          }\n        ),\n      };\n\n    case ACTION_TYPES.Load_Disease_Options:\n      return { ...state, diseaseOptions: action.payload.diseaseOptions };\n\n    case ACTION_TYPES.Load_Node_Types:\n      return { ...state, nodeTypes: action.payload.nodeTypes };\n\n    case ACTION_TYPES.Load_Edge_Types:\n      return { ...state, edgeTypes: action.payload.edgeTypes };\n\n    case ACTION_TYPES.Change_Disease:\n      return {\n        ...state,\n        selectedDisease: action.payload.selectedDisease,\n        attention: {},\n        metaPathGroups: {},\n      };\n\n    case ACTION_TYPES.Change_Drug:\n      return {\n        ...state,\n        drugPredictions: toggleDrugSelection(\n          state.drugPredictions,\n          action.payload.selectedDrug\n        ),\n      };\n\n    case ACTION_TYPES.Load_Node_Name_Dict:\n      return { ...state, nodeNameDict: action.payload.nodeNameDict };\n\n    case ACTION_TYPES.Set_Loading_Status:\n      return { ...state, ...action.payload };\n\n    case ACTION_TYPES.Select_Path_Noes:\n      return { ...state, selectedPathNodes: action.payload.selectedPathNodes };\n\n    case ACTION_TYPES.Change_Edge_THR: {\n      return { ...state, edgeThreshold: action.payload.edgeThreshold };\n    }\n\n    case ACTION_TYPES.Toggle_Meta_Path_Hide: {\n      return { ...state, metaPathSummary: action.payload.metaPathSummary };\n    }\n\n    case ACTION_TYPES.Add_Attention_Paths: {\n      return {\n        ...state,\n        attention: { ...state.attention, ...action.payload.attention },\n        metaPathGroups: {\n          ...state.metaPathGroups,\n          ...action.payload.metaPathGroups,\n        },\n      };\n    }\n\n    case ACTION_TYPES.Del_Attention_Paths: {\n      // deep copy\n      let attention = JSON.parse(JSON.stringify(state.attention)),\n        metaPathGroups = JSON.parse(JSON.stringify(state.metaPathGroups));\n\n      delete attention[`drug:${action.payload.selectedDrug}`];\n      delete metaPathGroups[action.payload.selectedDrug];\n      return {\n        ...state,\n        attention,\n        metaPathGroups,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nconst toggleDrugSelection = (\n  drugPredictions: IState['drugPredictions'],\n  selectedDrug: string\n) => {\n  return drugPredictions.map((d) => {\n    return {\n      ...d,\n      selected: selectedDrug === d.id ? !d.selected : d.selected,\n    };\n  });\n};\n\nexport const isAddDrug = (\n  drugPredictions: IState['drugPredictions'],\n  drugID: string\n) => {\n  return !drugPredictions\n    .filter((d) => d.selected)\n    .map((d) => d.id)\n    .includes(drugID);\n};\nexport default rootReducer;\n","import React, { createContext } from 'react';\nimport rootReducer from './reducer';\nimport { IState } from 'types';\n\nconst initialState: IState = {\n  diseaseOptions: [],\n  drugPredictions: [],\n  nodeTypes: [],\n  edgeTypes: {},\n  metaPathGroups: {},\n  attention: {},\n  selectedDisease: undefined,\n  nodeNameDict: {},\n  isDrugLoading: false,\n  isAttentionLoading: false,\n  isDiseaseLoading: false,\n  edgeThreshold: 0,\n  metaPathSummary: [],\n  selectedPathNodes: [],\n};\n\ninterface IStateContext {\n  state: IState;\n  dispatch: ({ type }: { type: string }) => void;\n}\n\nconst GlobalStore = createContext({} as IStateContext);\n\n// An wrapping function to handle thunks (dispatched actions which are wrapped in a function, needed for async callbacks)\nconst asyncer = (dispatch: any, state: IState) => (action: any) =>\n  typeof action === 'function' ? action(dispatch, state) : dispatch(action);\n\n// The StateProvider component to provide the global state to all child components\nexport function StateProvider(props: any) {\n  const [state, dispatchBase] = React.useReducer(rootReducer, initialState);\n\n  const dispatch = React.useCallback(asyncer(dispatchBase, state), []);\n\n  return (\n    <GlobalStore.Provider value={{ state, dispatch }}>\n      {props.children}\n    </GlobalStore.Provider>\n  );\n}\n\nexport function StateConsumer(Component: any) {\n  return function WrapperComponent(props: any) {\n    return (\n      <GlobalStore.Consumer>\n        {(context) => (\n          <Component\n            {...props}\n            globalState={context.state}\n            dispatch={context.dispatch}\n          />\n        )}\n      </GlobalStore.Consumer>\n    );\n  };\n}\n","const COLORS = [\n  '#4e79a7', // \"anatomy\",\n  '#edc949', // \"biological_process\",\n  '#e15759', // \"cellular_component\",\n  '#f28e2c', // \"disease\",\n  '#76b7b2', // \"drug\",\n  '#59a14f', // \"effect/phenotype\",\n  '#af7aa1', // \"exposure\",\n  '#ff9da7', // \"gene/protein\",\n  '#9c755f', // \"molecular_function\",\n  '#bab0ab', // \"pathway\"\n];\nlet colorDict: { [node: string]: string } = {};\n\nconst setNodeColor = (nodeTypes: string[]) => {\n  colorDict = {};\n  nodeTypes.forEach((nodeType, idx) => {\n    if (idx > COLORS.length - 1) {\n      idx = idx % (COLORS.length - 1);\n    }\n    colorDict[nodeType] = COLORS[idx];\n  });\n};\n\nconst getNodeColor = (nodeType: string) => {\n  if (colorDict[nodeType] === undefined) {\n    colorDict[nodeType] = COLORS[Object.keys(colorDict).length];\n  }\n\n  return colorDict[nodeType];\n};\n\nconst HIGHLIGHT_COLOR = '#1890ff';\nconst SELECTED_COLOR = 'dark';\n\nexport { setNodeColor, getNodeColor, HIGHLIGHT_COLOR, SELECTED_COLOR };\n","const cropText = (\n  text: string,\n  fontSize: number,\n  maxWidth: number,\n  fontWeight: number = 800\n): string => {\n  let returnText = text;\n  const context = document\n    .createElement('canvas')\n    .getContext('2d') as CanvasRenderingContext2D;\n  context.font = `${fontWeight} ${fontSize}px Arial`;\n  const width = context.measureText(text).width;\n  if (width > maxWidth) {\n    for (let i = 1; i < text.length; i += 1) {\n      const prevText = text.substr(0, i - 1).concat('...');\n      const currText = text.substr(0, i).concat('...');\n      const prevWidth = context.measureText(prevText).width;\n      const currWidth = context.measureText(currText).width;\n      if (currWidth > maxWidth && prevWidth < maxWidth) {\n        returnText = prevText;\n        break;\n      }\n    }\n  }\n  return returnText;\n};\n\nconst getTextWidth = (text: string, fontSize: number): number => {\n  const context = document\n    .createElement('canvas')\n    .getContext('2d') as CanvasRenderingContext2D;\n  context.font = `${fontSize}px Arial`;\n  const width = context.measureText(text).width;\n  return width;\n};\n\nexport { cropText, getTextWidth };\n","import React from 'react';\n\nconst VIRUS_ICON =\n  'M 483.55 227.55 H 462 c -50.68 0 -76.07 -61.27 -40.23 -97.11 L 437 115.19 A 28.44 28.44 0 0 0 396.8 75 L 381.56 90.22 c -35.84 35.83 -97.11 10.45 -97.11 -40.23 V 28.44 a 28.45 28.45 0 0 0 -56.9 0 V 50 c 0 50.68 -61.27 76.06 -97.11 40.23 L 115.2 75 A 28.44 28.44 0 0 0 75 115.19 l 15.25 15.25 c 35.84 35.84 10.45 97.11 -40.23 97.11 H 28.45 a 28.45 28.45 0 1 0 0 56.89 H 50 c 50.68 0 76.07 61.28 40.23 97.12 L 75 396.8 A 28.45 28.45 0 0 0 115.2 437 l 15.24 -15.25 c 35.84 -35.84 97.11 -10.45 97.11 40.23 v 21.54 a 28.45 28.45 0 0 0 56.9 0 V 462 c 0 -50.68 61.27 -76.07 97.11 -40.23 L 396.8 437 A 28.45 28.45 0 0 0 437 396.8 l -15.25 -15.24 c -35.84 -35.84 -10.45 -97.12 40.23 -97.12 h 21.54 a 28.45 28.45 0 1 0 0 -56.89 Z M 224 272 a 48 48 0 1 1 48 -48 A 48 48 0 0 1 224 272 Z m 80 56 a 24 24 0 1 1 24 -24 A 24 24 0 0 1 304 328 Z';\n\nconst YES_ICON =\n    'M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z',\n  NO_ICON =\n    'M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z';\n\nconst DRUG_ICON =\n  'M 555.3 300.1 L 424.2 112.8 C 401.9 81 366.4 64 330.4 64 c -22.6 0 -45.5 6.7 -65.5 20.7 c -19.7 13.8 -33.7 32.8 -41.5 53.8 C 220.5 79.2 172 32 112 32 C 50.1 32 0 82.1 0 144 v 224 c 0 61.9 50.1 112 112 112 s 112 -50.1 112 -112 V 218.9 c 3.3 8.6 7.3 17.1 12.8 25 L 368 431.2 c 22.2 31.8 57.7 48.8 93.8 48.8 c 22.7 0 45.5 -6.7 65.5 -20.7 c 51.7 -36.2 64.2 -107.5 28 -159.2 Z M 160 256 H 64 V 144 c 0 -26.5 21.5 -48 48 -48 s 48 21.5 48 48 v 112 Z m 194.8 44.9 l -65.6 -93.7 c -7.7 -11 -10.7 -24.4 -8.3 -37.6 c 2.3 -13.2 9.7 -24.8 20.7 -32.5 c 8.5 -6 18.5 -9.1 28.8 -9.1 c 16.5 0 31.9 8 41.3 21.5 l 65.6 93.7 l -82.5 57.7 Z';\n\nconst EDIT_ICON =\n  'M402.3 344.9l32-32c5-5 13.7-1.5 13.7 5.7V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V112c0-26.5 21.5-48 48-48h273.5c7.1 0 10.7 8.6 5.7 13.7l-32 32c-1.5 1.5-3.5 2.3-5.7 2.3H48v352h352V350.5c0-2.1.8-4.1 2.3-5.6zm156.6-201.8L296.3 405.7l-90.4 10c-26.2 2.9-48.5-19.2-45.6-45.6l10-90.4L432.9 17.1c22.9-22.9 59.9-22.9 82.7 0l43.2 43.2c22.9 22.9 22.9 60 .1 82.8zM460.1 174L402 115.9 216.2 301.8l-7.3 65.3 65.3-7.3L460.1 174zm64.8-79.7l-43.2-43.2c-4.1-4.1-10.8-4.1-14.8 0L436 82l58.1 58.1 30.9-30.9c4-4.2 4-10.8-.1-14.9z';\n\nconst SEARCH_ICON =\n  'M909.6 854.5L649.9 594.8C690.2 542.7 712 479 712 412c0-80.2-31.3-155.4-87.9-212.1-56.6-56.7-132-87.9-212.1-87.9s-155.5 31.3-212.1 87.9C143.2 256.5 112 331.8 112 412c0 80.1 31.3 155.5 87.9 212.1C256.5 680.8 331.8 712 412 712c67 0 130.6-21.8 182.7-62l259.7 259.6a8.2 8.2 0 0011.6 0l43.6-43.5a8.2 8.2 0 000-11.6zM570.4 570.4C528 612.7 471.8 636 412 636s-116-23.3-158.4-65.6C211.3 528 188 471.8 188 412s23.3-116.1 65.6-158.4C296 211.3 352.2 188 412 188s116.1 23.2 158.4 65.6S636 352.2 636 412s-23.3 116.1-65.6 158.4z';\n\nconst LOADING_ICON = (\n  <g>\n    <text textAnchor=\"middle\" x=\"24\">\n      LOADING...\n    </text>\n    <rect x=\"0\" y=\"50\" width=\"14\" height=\"30\" fill=\"#1890ff\">\n      <animateTransform\n        attributeType=\"xml\"\n        attributeName=\"transform\"\n        type=\"translate\"\n        values=\"0 0; 0 20; 0 0\"\n        begin=\"0\"\n        dur=\"0.6s\"\n        repeatCount=\"indefinite\"\n      />\n    </rect>\n    <rect x=\"20\" y=\"50\" width=\"14\" height=\"30\" fill=\"#1890ff\">\n      <animateTransform\n        attributeType=\"xml\"\n        attributeName=\"transform\"\n        type=\"translate\"\n        values=\"0 0; 0 20; 0 0\"\n        begin=\"0.2s\"\n        dur=\"0.6s\"\n        repeatCount=\"indefinite\"\n      />\n    </rect>\n    <rect x=\"40\" y=\"50\" width=\"14\" height=\"30\" fill=\"#1890ff\">\n      <animateTransform\n        attributeType=\"xml\"\n        attributeName=\"transform\"\n        type=\"translate\"\n        values=\"0 0; 0 20; 0 0\"\n        begin=\"0.4s\"\n        dur=\"0.6s\"\n        repeatCount=\"indefinite\"\n      />\n    </rect>\n  </g>\n);\n\nexport {\n  VIRUS_ICON,\n  YES_ICON,\n  NO_ICON,\n  DRUG_ICON,\n  EDIT_ICON,\n  LOADING_ICON,\n  SEARCH_ICON,\n};\n","import { IAttentionTree } from 'types';\nexport { cropText, getTextWidth } from './text';\nexport * from './icon';\n\nexport {\n  setNodeColor,\n  getNodeColor,\n  HIGHLIGHT_COLOR,\n  SELECTED_COLOR,\n} from './color';\n\nexport const pruneEdge = (\n  node: IAttentionTree,\n  threshold: number\n): IAttentionTree => {\n  if (node.children.length > 0) {\n    node = {\n      ...node,\n      children: node.children\n        .filter((d) => d.score >= threshold)\n        .map((node) => pruneEdge(node, threshold)),\n    };\n  }\n  return node;\n};\n\nexport const sigmoid = (t: number) => {\n  return 1 / (1 + Math.pow(Math.E, -t));\n};\n","import React from 'react';\nimport { requestEmbedding } from 'stores/DataService';\nimport { IState, IDispatch } from 'types';\nimport { StateConsumer } from 'stores';\nimport * as d3 from 'd3';\nimport { HIGHLIGHT_COLOR, SELECTED_COLOR } from 'helpers/color';\nimport { LOADING_ICON } from 'helpers';\nimport { selectDrug } from 'stores/actions';\nimport { isAddDrug } from 'stores/reducer';\nimport lasso from './lasso.js';\n\ninterface State {\n  embedding: { [key: string]: [number, number] };\n  tooltip: {\n    visible: boolean;\n    info: string;\n    position: [number, number];\n  };\n}\ninterface Props {\n  width: number;\n  height: number;\n  globalState: IState;\n  dispatch: IDispatch;\n}\n\nclass Scatter extends React.Component<Props, State> {\n  circleRadius = 3;\n  hoverTimeout: number = 0;\n  WAIT = 500;\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      embedding: {},\n      tooltip: { visible: false, info: '', position: [0, 0] },\n    };\n    this.onChangeDrug = this.onChangeDrug.bind(this);\n  }\n  async loadEmbedding() {\n    const embedding = await requestEmbedding();\n    this.setState({ embedding });\n  }\n  componentDidMount() {\n    this.loadEmbedding();\n  }\n\n  addLasso(width: number, height: number) {\n    const { drugPredictions } = this.props.globalState;\n    const selectedDrugIds = drugPredictions\n      .filter((d) => d.selected)\n      .map((d) => d.id);\n    // lasso draw\n    d3.selectAll('g.lasso').remove();\n    var svg = d3.select('svg.scatter');\n\n    var lasso_area = d3.select('rect.lasso');\n\n    // Lasso functions to execute while lassoing\n    var lasso_start = () => {\n      // (mylasso.items() as any).attr('r', 5); // reset size\n      // .attr('fill', 'white')\n    };\n\n    var lasso_draw = () => {\n      // Style the possible dots\n      // mylasso\n      // .possibleItems()\n      // .classed(\"possible\", true)\n    };\n\n    var lasso_end = () => {\n      // mylasso.selectedItems()\n      //     .attr('fill', colors[this.selected.length])\n      //     .attr('r', '7')\n      //     .classed(`group_${this.selected.length}`, true)\n      // mylasso\n      // .items()\n      // .classed(\"possible\", false)\n\n      (mylasso.selectedItems() as any)._groups[0].forEach((d: any) => {\n        const drugID = d.attributes.id.value;\n        if (!selectedDrugIds.includes(drugID)) {\n          selectDrug(\n            drugID,\n            this.props.globalState.selectedDisease,\n            true,\n            this.props.dispatch\n          );\n        }\n      });\n    };\n\n    var mylasso = lasso();\n    mylasso.items(svg.selectAll('circle.highlighted'));\n    mylasso\n      .targetArea(lasso_area) // area where the lasso can be started\n      .on('start', lasso_start) // lasso start function\n      .on('draw', lasso_draw) // lasso draw function\n      .on('end', lasso_end); // lasso end function\n\n    svg.call(mylasso);\n  }\n  drawScatter() {\n    const { drugPredictions } = this.props.globalState;\n    const { width, height } = this.props;\n\n    this.addLasso(width, height);\n\n    const { embedding } = this.state;\n    const xDomain = d3.extent(Object.values(embedding).map((d) => d[0])) as [\n        number,\n        number\n      ],\n      yDomain = d3.extent(Object.values(embedding).map((d) => d[1])) as [\n        number,\n        number\n      ];\n\n    const xScale = d3\n      .scaleLinear()\n      .domain(xDomain)\n      .range([this.circleRadius, width - this.circleRadius]);\n    const yScale = d3\n      .scaleLinear()\n      .domain(yDomain)\n      .range([this.circleRadius, height - this.circleRadius]);\n\n    const drugIds = drugPredictions.map((d) => d.id);\n    const selectedDrugIds = drugPredictions\n      .filter((d) => d.selected)\n      .map((d) => d.id);\n\n    const nodes = Object.keys(embedding)\n      .sort((a, b) => drugIds.indexOf(a) - drugIds.indexOf(b))\n      .map((drugId) => {\n        const [x, y] = embedding[drugId];\n        const drugRank = drugIds.indexOf(drugId);\n        const isHighlighted = drugRank > -1; // the top n predicted drugs\n        const isSelected = selectedDrugIds.includes(drugId); // the drug selected by users\n        return (\n          <circle\n            cx={xScale(x)}\n            cy={yScale(y)}\n            key={drugId}\n            className={isHighlighted ? 'highlighted drug' : 'drug'}\n            id={drugId}\n            fill={\n              isSelected\n                ? SELECTED_COLOR\n                : isHighlighted\n                ? HIGHLIGHT_COLOR\n                : 'lightGray'\n            }\n            stroke={'white'}\n            r={isHighlighted ? this.circleRadius * 1.5 : this.circleRadius}\n            onDoubleClick={() => {\n              if (isHighlighted) this.onChangeDrug(drugId);\n            }}\n            onClick={() => this.showTooltip(drugId, [xScale(x), yScale(y)])}\n            // onMouseLeave={() => this.hideTooltip()}\n          />\n        );\n      });\n    return nodes;\n  }\n  onChangeDrug(selectedDrug: string) {\n    const isAdd = isAddDrug(\n      this.props.globalState.drugPredictions,\n      selectedDrug\n    );\n    selectDrug(\n      selectedDrug,\n      this.props.globalState.selectedDisease,\n      isAdd,\n      this.props.dispatch\n    );\n  }\n  showTooltip(drugId: string, position: [number, number]) {\n    const { nodeNameDict } = this.props.globalState;\n    this.hoverTimeout = window.setTimeout(() => {\n      this.setState({\n        tooltip: {\n          visible: true,\n          info: `drug: ${nodeNameDict['drug'][drugId]}`,\n          position,\n        },\n      });\n    }, this.WAIT);\n  }\n  hideTooltip() {\n    window.clearTimeout(this.hoverTimeout);\n    this.setState({\n      tooltip: {\n        visible: false,\n        info: ``,\n        position: [0, 0],\n      },\n    });\n  }\n  render() {\n    const { isDrugLoading, selectedDisease } = this.props.globalState;\n    const { width, height } = this.props;\n    const { tooltip } = this.state;\n\n    return (\n      <div style={{ position: 'relative' }}>\n        <svg width={width} height={height} className=\"scatter\">\n          <rect\n            className=\"lasso area\"\n            width={width}\n            height={height}\n            opacity={0}\n          />\n          <g className=\"scatter\">\n            {selectedDisease ? (\n              this.state.embedding ? (\n                this.drawScatter()\n              ) : (\n                <g\n                  transform={`translate(${width / 2}, ${height / 2})`}\n                  textAnchor=\"middle\"\n                >\n                  {LOADING_ICON}\n                </g>\n              )\n            ) : (\n              <text x={width / 2} y={height / 2} fill=\"gray\">\n                Please select a disease first\n              </text>\n            )}\n            {/* overlap a loading icon when loading */}\n            {isDrugLoading ? (\n              <g\n                transform={`translate(${width / 2}, ${height / 2})`}\n                textAnchor=\"middle\"\n              >\n                {LOADING_ICON}\n              </g>\n            ) : (\n              <g />\n            )}\n          </g>{' '}\n        </svg>\n        <div\n          className={`tooltip tooltip-${tooltip.visible ? 'show' : 'hide'}`}\n          style={{\n            left: tooltip.position[0] + this.circleRadius,\n            top: tooltip.position[1] + this.circleRadius,\n          }}\n        >\n          {tooltip.info}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default StateConsumer(Scatter);\n","import * as selection from 'd3-selection';\nimport * as drag from 'd3-drag';\nimport classifyPoint from 'robust-point-in-polygon';\n\nexport default function () {\n  var items = [],\n    closePathDistance = 75,\n    closePathSelect = true,\n    isPathClosed = false,\n    hoverSelect = true,\n    targetArea,\n    on = { start: function () {}, draw: function () {}, end: function () {} };\n\n  // Function to execute on call\n  function lasso(_this) {\n    // add a new group for the lasso\n    var g = _this.append('g').attr('class', 'lasso');\n\n    // add the drawn path for the lasso\n    var dyn_path = g.append('path').attr('class', 'drawn');\n\n    // add a closed path\n    var close_path = g.append('path').attr('class', 'loop_close');\n\n    // add an origin node\n    var origin_node = g.append('circle').attr('class', 'origin');\n\n    // The transformed lasso path for rendering\n    var tpath;\n\n    // The lasso origin for calculations\n    var origin;\n\n    // The transformed lasso origin for rendering\n    var torigin;\n\n    // Store off coordinates drawn\n    var drawnCoords;\n\n    // Apply drag behaviors\n    var dragAction = drag\n      .drag()\n      .on('start', dragstart)\n      .on('drag', dragmove)\n      .on('end', dragend);\n\n    // Call drag\n    targetArea.call(dragAction);\n\n    function dragstart() {\n      // Init coordinates\n      drawnCoords = [];\n\n      // Initialize paths\n      tpath = '';\n      dyn_path.attr('d', null);\n      close_path.attr('d', null);\n\n      // Set every item to have a false selection and reset their center point and counters\n      items.nodes().forEach(function (e) {\n        e.__lasso.possible = false;\n        e.__lasso.selected = false;\n        e.__lasso.hoverSelect = false;\n        e.__lasso.loopSelect = false;\n\n        var box = e.getBoundingClientRect();\n        e.__lasso.lassoPoint = [\n          Math.round(box.left + box.width / 2),\n          Math.round(box.top + box.height / 2),\n        ];\n      });\n\n      // if hover is on, add hover function\n      if (hoverSelect) {\n        items.on('mouseover.lasso', function () {\n          // if hovered, change lasso selection attribute to true\n          this.__lasso.hoverSelect = true;\n        });\n      }\n\n      // Run user defined start function\n      on.start();\n    }\n\n    function dragmove() {\n      // Get mouse position within body, used for calculations\n      var x, y;\n      if (selection.event.sourceEvent.type === 'touchmove') {\n        x = selection.event.sourceEvent.touches[0].clientX;\n        y = selection.event.sourceEvent.touches[0].clientY;\n      } else {\n        x = selection.event.sourceEvent.clientX;\n        y = selection.event.sourceEvent.clientY;\n      }\n\n      // Get mouse position within drawing area, used for rendering\n      var tx = selection.mouse(this)[0];\n      var ty = selection.mouse(this)[1];\n\n      // Initialize the path or add the latest point to it\n      if (tpath === '') {\n        tpath = tpath + 'M ' + tx + ' ' + ty;\n        origin = [x, y];\n        torigin = [tx, ty];\n        // Draw origin node\n        origin_node\n          .attr('cx', tx)\n          .attr('cy', ty)\n          .attr('r', 7)\n          .attr('display', null);\n      } else {\n        tpath = tpath + ' L ' + tx + ' ' + ty;\n      }\n\n      drawnCoords.push([x, y]);\n\n      // Calculate the current distance from the lasso origin\n      var distance = Math.sqrt(\n        Math.pow(x - origin[0], 2) + Math.pow(y - origin[1], 2)\n      );\n\n      // Set the closed path line\n      var close_draw_path =\n        'M ' + tx + ' ' + ty + ' L ' + torigin[0] + ' ' + torigin[1];\n\n      // Draw the lines\n      dyn_path.attr('d', tpath);\n\n      close_path.attr('d', close_draw_path);\n\n      // Check if the path is closed\n      isPathClosed = distance <= closePathDistance ? true : false;\n\n      // If within the closed path distance parameter, show the closed path. otherwise, hide it\n      if (isPathClosed && closePathSelect) {\n        close_path.attr('display', null);\n      } else {\n        close_path.attr('display', 'none');\n      }\n\n      items.nodes().forEach(function (n) {\n        n.__lasso.loopSelect =\n          isPathClosed && closePathSelect && n.__lasso.lassoPoint\n            ? classifyPoint(drawnCoords, n.__lasso.lassoPoint) < 1\n            : false;\n        n.__lasso.possible = n.__lasso.hoverSelect || n.__lasso.loopSelect;\n      });\n\n      on.draw();\n    }\n\n    function dragend() {\n      // Remove mouseover tagging function\n      items.on('mouseover.lasso', null);\n\n      items.nodes().forEach(function (n) {\n        n.__lasso.selected = n.__lasso.possible;\n        n.__lasso.possible = false;\n      });\n\n      // Clear lasso\n      dyn_path.attr('d', null);\n      close_path.attr('d', null);\n      origin_node.attr('display', 'none');\n\n      // Run user defined end function\n      on.end();\n    }\n  }\n\n  // Set or get list of items for lasso to select\n  lasso.items = function (_) {\n    if (!arguments.length) return items;\n    items = _;\n    var nodes = items.nodes();\n    nodes.forEach(function (n) {\n      n.__lasso = {\n        possible: false,\n        selected: false,\n      };\n    });\n    return lasso;\n  };\n\n  // Return possible items\n  lasso.possibleItems = function () {\n    return items.filter(function () {\n      return this.__lasso.possible;\n    });\n  };\n\n  // Return selected items\n  lasso.selectedItems = function () {\n    return items.filter(function () {\n      return this.__lasso.selected;\n    });\n  };\n\n  // Return not possible items\n  lasso.notPossibleItems = function () {\n    return items.filter(function () {\n      return !this.__lasso.possible;\n    });\n  };\n\n  // Return not selected items\n  lasso.notSelectedItems = function () {\n    return items.filter(function () {\n      return !this.__lasso.selected;\n    });\n  };\n\n  // Distance required before path auto closes loop\n  lasso.closePathDistance = function (_) {\n    if (!arguments.length) return closePathDistance;\n    closePathDistance = _;\n    return lasso;\n  };\n\n  // Option to loop select or not\n  lasso.closePathSelect = function (_) {\n    if (!arguments.length) return closePathSelect;\n    closePathSelect = _ === true ? true : false;\n    return lasso;\n  };\n\n  // Not sure what this is for\n  lasso.isPathClosed = function (_) {\n    if (!arguments.length) return isPathClosed;\n    isPathClosed = _ === true ? true : false;\n    return lasso;\n  };\n\n  // Option to select on hover or not\n  lasso.hoverSelect = function (_) {\n    if (!arguments.length) return hoverSelect;\n    hoverSelect = _ === true ? true : false;\n    return lasso;\n  };\n\n  // Events\n  lasso.on = function (type, _) {\n    if (!arguments.length) return on;\n    if (arguments.length === 1) return on[type];\n    var types = ['start', 'draw', 'end'];\n    if (types.indexOf(type) > -1) {\n      on[type] = _;\n    }\n    return lasso;\n  };\n\n  // Area where lasso can be triggered from\n  lasso.targetArea = function (_) {\n    if (!arguments.length) return targetArea;\n    targetArea = _;\n    return lasso;\n  };\n\n  return lasso;\n}\n","import { Card } from 'antd';\nimport Scatter from 'components/CardContainer/Scatter';\n\nimport React from 'react';\n\nimport './index.css';\n\ninterface Props {\n  width: number;\n  height: number;\n}\n\nclass Container extends React.Component<Props, {}> {\n  TITLE_HEIGHT = 36;\n  MARGIN = 10;\n  PADDING = 10;\n\n  render() {\n    const { width, height } = this.props;\n    const svgOuterHeight = height - 2 * this.PADDING - this.TITLE_HEIGHT;\n    return (\n      <Card\n        size=\"small\"\n        title=\"Drug Embeddings\"\n        style={{\n          width: width - 2 * this.MARGIN,\n          height: height,\n          margin: `0px ${this.MARGIN}px`,\n        }}\n        bodyStyle={{\n          padding: this.PADDING,\n          height: height - this.TITLE_HEIGHT,\n          overflowY: 'auto',\n        }}\n        headStyle={{ height: this.TITLE_HEIGHT }}\n      >\n        <Scatter\n          width={width - 2 * this.PADDING - 2 * this.MARGIN}\n          height={svgOuterHeight}\n        />\n      </Card>\n    );\n  }\n}\n\nexport default Container;\n","import React from 'react';\nimport { IState, IAttentionTree } from 'types';\nimport * as d3 from 'd3';\nimport { Tooltip } from 'antd';\nimport { getNodeColor, pruneEdge } from 'helpers';\nimport {\n  cropText,\n  VIRUS_ICON,\n  DRUG_ICON,\n  getTextWidth,\n  LOADING_ICON,\n} from 'helpers';\n\ninterface Props {\n  width: number;\n  height: number;\n  globalState: IState;\n}\n\nexport default class AttentionTree extends React.Component<Props, {}> {\n  nodeHeight = 20;\n  fontSize = 14;\n  labelLength = 150;\n  midGap = 60; // the gaph between two trees\n  drawNodeAttentionHorizontal(\n    nodeAttention: IAttentionTree,\n    stepGap: number,\n    edgeThreshold: number\n  ) {\n    const { width } = this.props;\n    const {\n      nodeNameDict,\n      edgeTypes,\n      selectedPathNodes,\n    } = this.props.globalState;\n\n    let nodeAttentionFiltered = pruneEdge(nodeAttention, edgeThreshold);\n\n    const rootNode = d3.hierarchy(nodeAttentionFiltered);\n    const d3Tree = d3\n      .tree<IAttentionTree>()\n      .nodeSize([this.nodeHeight + 2, stepGap]);\n\n    const root = d3Tree(rootNode);\n\n    const linkGene = d3\n      .linkHorizontal<any, d3.HierarchyPointLink<IAttentionTree>, any>()\n      // modify the source and target x, y to make space for node\n      .source((d) => {\n        const newX =\n          root.data.nodeType === 'drug'\n            ? width / 2 -\n              this.midGap / 2 -\n              this.labelLength -\n              d.source.y -\n              this.labelLength / 2\n            : d.source.y + this.labelLength / 2;\n        const newY = d.source.x;\n\n        return { x: newX, y: newY };\n      })\n      .target((d) => {\n        const newX =\n          root.data.nodeType === 'drug'\n            ? width / 2 -\n              this.midGap / 2 -\n              this.labelLength -\n              d.target.y +\n              this.labelLength / 2\n            : d.target.y - this.labelLength / 2;\n        const newY = d.target.x;\n\n        return { x: newX, y: newY };\n      })\n      .x((d) => d.x)\n      .y((d) => d.y);\n\n    const maxScore = Math.max(\n      ...root.links().map((link) => link.target.data.score)\n    );\n\n    let widthScale = d3.scaleLinear().domain([0, maxScore]).range([1, 5]);\n\n    const links = root.links().map((link, i) => {\n      let edgeInfo = link.target.data.edgeInfo.replace('rev_', '');\n      if (edgeTypes[edgeInfo]) {\n        edgeInfo = edgeTypes[edgeInfo]['edgeInfo'] || edgeInfo;\n      }\n      return (\n        <Tooltip\n          title={edgeInfo}\n          key={`${link.source.data.nodeId}=>${link.target.data.nodeId}_link${i}`}\n          destroyTooltipOnHide\n        >\n          <g>\n            <path\n              d={linkGene(link)!}\n              className={`link ${link.source.data.nodeId}=>${link.target.data.nodeId}`}\n              fill=\"none\"\n              stroke=\"gray\"\n              strokeWidth={widthScale(link.target.data.score)}\n              opacity={selectedPathNodes.length > 0 ? 0.5 : 1}\n            />\n            <path\n              d={linkGene(link)!}\n              className=\"mask\"\n              fill=\"none\"\n              stroke=\"transparent\"\n              strokeWidth=\"3\"\n            />\n          </g>\n        </Tooltip>\n      );\n    });\n\n    const allY = root.descendants().map((node) => node.x);\n    const minY = Math.min(...allY);\n    const maxY = Math.max(...allY);\n\n    const height = maxY - minY + this.nodeHeight + 4; // default seperation in d3 tree is 2\n\n    const nodes = root.descendants().map((node, i) => {\n      let { nodeId, nodeType } = node.data;\n      let nodeFullName = nodeNameDict[nodeType][nodeId];\n      if (nodeFullName === undefined) {\n        nodeId = nodeId.replace(/_/g, '') + '.0'; // the id of a merged node is xxx_xxx_xxxx\n        nodeFullName = nodeNameDict[nodeType][nodeId];\n      }\n      let nodeShortName = cropText(\n        nodeFullName,\n        12,\n        this.labelLength - 25 - getTextWidth('..(0.00)', 14)\n      );\n      let tooltipTitle = nodeShortName?.includes('..') ? nodeFullName : '';\n      let icon_path = '';\n      if (nodeType === 'disease') icon_path = VIRUS_ICON;\n      if (nodeType === 'drug') icon_path = DRUG_ICON;\n\n      const isHighlighted =\n        selectedPathNodes.length === 0 ||\n        (selectedPathNodes.map((d) => d.nodeType).includes(nodeType) &&\n          selectedPathNodes.map((d) => d.nodeId).includes(nodeId));\n\n      return (\n        <Tooltip\n          title={tooltipTitle}\n          key={`node${i}_${nodeFullName}`}\n          destroyTooltipOnHide\n          mouseEnterDelay={0.3}\n        >\n          <g\n            className={`${nodeId} node`}\n            transform={`translate(${\n              root.data.nodeType === 'drug'\n                ? width / 2 - this.midGap / 2 - this.labelLength - node.y\n                : node.y\n            }, ${node.x})`}\n            cursor=\"pointer\"\n          >\n            <rect\n              width={this.labelLength}\n              height={this.nodeHeight}\n              fill={getNodeColor(nodeType)}\n              x={(-1 * this.labelLength) / 2}\n              y={-this.nodeHeight / 2}\n              opacity={isHighlighted ? 1 : 0.2}\n            />\n            <path\n              className=\"virus_icon\"\n              d={icon_path}\n              transform={`translate(${(-1 * this.labelLength) / 2 + 2}, ${\n                -this.nodeHeight / 2\n              }) scale(0.04)`}\n              fill=\"white\"\n            />\n            <text\n              fill=\"white\"\n              fontSize={this.fontSize}\n              transform={`translate(${(-1 * this.labelLength) / 2 + 25}, ${\n                (this.nodeHeight - this.fontSize) / 2\n              })`}\n            >\n              {/* {`${nodeShortName}\n                  ${node.depth > 0 ? ':' + node.data.score.toFixed(2) : ''}`} */}\n              {nodeShortName}\n            </text>\n          </g>\n        </Tooltip>\n      );\n    });\n\n    return {\n      content: [\n        <g key=\"links\" className=\"links\">\n          {links}\n        </g>,\n        <g key=\"nodes\" className=\"nodes\">\n          {nodes}\n        </g>,\n      ],\n      height: height,\n    };\n  }\n  drawSubgraph() {\n    let { attention, edgeThreshold } = this.props.globalState;\n    let { width } = this.props;\n\n    let stepGap = (width - 2 * this.labelLength - this.midGap) / 4;\n    let heights = [0];\n    const content = Object.keys(attention).map((nodeKey: string, idx) => {\n      const { height, content } = this.drawNodeAttentionHorizontal(\n        attention[nodeKey],\n        stepGap,\n        edgeThreshold\n      );\n      heights.push(height);\n      return (\n        <g\n          className={nodeKey}\n          key={nodeKey}\n          transform={`translate(${\n            ((width + this.midGap) / 2) * idx + this.labelLength / 2\n          }, ${height / 2 + 2 * this.nodeHeight})`}\n        >\n          {content}\n        </g>\n      );\n    });\n    return { content, height: Math.max(...heights) };\n  }\n  render() {\n    const { width, height, globalState } = this.props;\n    const {\n      isAttentionLoading,\n      selectedDisease,\n      drugPredictions,\n    } = globalState;\n    const selectedDrugs = drugPredictions.filter((d) => d.selected);\n\n    const { content, height: graphHeight } = this.drawSubgraph();\n    return (\n      <svg\n        width={width}\n        height={Math.max(graphHeight, height)}\n        className=\"nodeLink\"\n      >\n        {selectedDrugs.length > 0 && selectedDisease ? (\n          content\n        ) : (\n          <text x={width / 2} y={height / 2} fill=\"gray\">\n            Please select a disease and a drug first\n          </text>\n        )}\n        {isAttentionLoading ? (\n          <g\n            transform={`translate(${width / 2}, ${height / 2})`}\n            textAnchor=\"middle\"\n          >\n            {LOADING_ICON}\n          </g>\n        ) : (\n          <g />\n        )}\n      </svg>\n    );\n  }\n}\n","import * as React from 'react';\nimport * as d3 from 'd3';\nimport { IAttentionTree, IState } from 'types';\nimport { getNodeColor, pruneEdge } from 'helpers';\n\ninterface Props {\n  height: number;\n  width: number;\n  globalState: IState;\n}\n\ninterface State {}\n\ninterface INode extends d3.SimulationNodeDatum {\n  id: string; // `${node_type}:${node_id}`\n  nodeId: string; //\n  nodeType: string; //\n  fx?: number;\n  fy?: number;\n}\n\ninterface ILink {\n  source: string;\n  target: string;\n  score: number;\n  edgeInfo: string;\n}\n\nexport default class ModelNodeForce extends React.Component<Props, State> {\n  public padding = 20;\n  RADIUS = 8;\n  prevNodes: INode[] = [];\n  prevLinks: ILink[] = [];\n  simulation = d3\n    .forceSimulation<INode, ILink>()\n    .force('charge', d3.forceManyBody<INode>().strength(-170))\n    .force(\n      'link',\n      d3\n        .forceLink<INode, ILink>()\n        .id((d) => d.id)\n        .distance(6)\n        .strength(0.6)\n    )\n    .force('collision', d3.forceCollide().radius(this.RADIUS + 2))\n    .alphaMin(0.05); // force quick simulation\n\n  ticked(\n    svgNodes: d3.Selection<\n      SVGGElement | d3.BaseType,\n      INode,\n      d3.BaseType,\n      unknown\n    >,\n    svgLinks: any\n  ) {\n    svgNodes.attr('transform', (d) => `translate(${d.x}, ${d.y})`);\n\n    svgLinks\n      .select('line.link')\n      .attr('x1', (d: any) => d.source.x)\n      .attr('y1', (d: any) => d.source.y)\n      .attr('x2', (d: any) => d.target.x)\n      .attr('y2', (d: any) => d.target.y);\n\n    svgLinks\n      .select('line.mask')\n      .attr('x1', (d: any) => d.source.x)\n      .attr('y1', (d: any) => d.source.y)\n      .attr('x2', (d: any) => d.target.x)\n      .attr('y2', (d: any) => d.target.y);\n\n    svgLinks\n      .select('text')\n      .attr('text-anchor', 'middle')\n      .attr(\n        'transform',\n        (d: any) =>\n          `translate(${(d.target.x + d.source.x) / 2}, ${\n            (d.source.y + d.target.y) / 2\n          })`\n      );\n  }\n\n  dragstarted(d: INode) {\n    if (!d3.event.active) this.simulation.alpha(0.3).restart();\n    d.fx = d.x;\n    d.fy = d.y;\n  }\n\n  dragged(d: INode) {\n    d.fx = d3.event.x;\n    d.fy = d3.event.y;\n  }\n\n  dragended(d: INode) {\n    if (!d3.event.active) this.simulation.alpha(0);\n    d.fx = d3.event.x;\n    d.fy = d3.event.y;\n  }\n\n  isTargetNode(d: INode) {\n    const { drugPredictions, selectedDisease } = this.props.globalState;\n    const selectedDrugs = drugPredictions\n      .filter((d) => d.selected)\n      .map((d) => d.id);\n    return selectedDrugs.includes(d.nodeId) || selectedDisease === d.nodeId;\n  }\n\n  isHighlighted(d: INode) {\n    const { selectedPathNodes } = this.props.globalState;\n    return (\n      selectedPathNodes.map((i) => i.nodeType).includes(d.nodeType) &&\n      selectedPathNodes.map((i) => i.nodeId).includes(d.nodeId)\n    );\n  }\n\n  getNodeLinks() {\n    const {\n      drugPredictions,\n      attention,\n      edgeThreshold,\n      selectedDisease,\n      edgeTypes,\n    } = this.props.globalState;\n    const { width, height } = this.props;\n    const selectedDrugs = drugPredictions\n      .filter((d) => d.selected)\n      .map((d) => d.id);\n\n    let nodes: INode[] = [],\n      links: ILink[] = [];\n\n    Object.values(attention).forEach((nodeAttention: IAttentionTree) => {\n      let nodeAttentionFiltered = pruneEdge(nodeAttention, edgeThreshold);\n      const rootNode = d3.hierarchy(nodeAttentionFiltered);\n      let desNodes: INode[] = [];\n      rootNode.descendants().forEach((d) => {\n        const node = {\n          id: `${d.data.nodeType}:${d.data.nodeId}`,\n          nodeId: d.data.nodeId,\n          nodeType: d.data.nodeType,\n        };\n        const prevNode = this.prevNodes.find((d) => d.id === node.id);\n        desNodes.push({ ...node, ...prevNode });\n      });\n      nodes = nodes.concat(desNodes);\n      const desLinks = rootNode.links().map((d) => {\n        const sourceData = d.source.data,\n          targetData = d.target.data;\n        let edgeInfo = targetData.edgeInfo.replace('rev_', '');\n        edgeInfo = edgeTypes[edgeInfo]?.edgeInfo || edgeInfo;\n        return {\n          source: `${sourceData.nodeType}:${sourceData.nodeId}`,\n          target: `${targetData.nodeType}:${targetData.nodeId}`,\n          score: targetData.score,\n          edgeInfo,\n        };\n      });\n      links = links.concat(desLinks);\n    });\n\n    // // show the virus host proteins\n    // let nodes:INode[] =  viralTargets.map(d => { return { id: d.toString() } }),\n    //     links:ILink[] = targetLinks.map(edge => { return { source: edge[0].toString(), target: edge[1].toString() } })\n\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      const drugIdx = selectedDrugs.indexOf(node.nodeId);\n      if (node.nodeId === selectedDisease) {\n        node.fy = height / 2;\n        node.fx = width * 0.2;\n      } else if (drugIdx > -1) {\n        node.fy = (height / (selectedDrugs.length + 1)) * (drugIdx + 1);\n        node.fx = width * 0.8;\n      }\n    }\n\n    this.prevNodes = nodes;\n    this.prevLinks = links;\n\n    return { nodes, links };\n  }\n\n  drawGraph() {\n    const { nodeNameDict } = this.props.globalState;\n    const { nodes, links } = this.getNodeLinks();\n    const { width, height } = this.props;\n\n    const widthScale = d3\n      .scaleLinear()\n      .range([1, 4])\n      .domain(d3.extent(links.map((d) => d.score)) as [number, number]);\n\n    let svgLinks: any = d3\n      .select('svg.graph')\n      .select('g.links')\n      .selectAll('g.link')\n      .data(links)\n      .join((enter) => enter.append('g').attr('class', 'link'))\n      .on('mouseover', function () {\n        d3.select(this)\n          .select('text.edgeLabel')\n          .transition()\n          .delay(500)\n          .attr('class', 'edgeLabel');\n      })\n      .on('mouseout', function () {\n        d3.select(this)\n          .select('text.edgeLabel')\n          .transition()\n          .delay(500)\n          .attr('class', 'edgeLabel hidden');\n      });\n\n    svgLinks\n      .append('line')\n      .attr('x1', (d: any) => d.target.x)\n      .attr('y1', (d: any) => d.target.y)\n      .attr('x2', (d: any) => d.source.x)\n      .attr('y2', (d: any) => d.source.y)\n      .attr('class', 'link')\n      .attr('stroke', '#aaa')\n      .attr('stroke-width', (d: any) => widthScale(d.score))\n      .attr('id', (d: any) => d.id);\n\n    svgLinks\n      .append('line')\n      .attr('x1', (d: any) => d.target.x)\n      .attr('y1', (d: any) => d.target.y)\n      .attr('x2', (d: any) => d.source.x)\n      .attr('y2', (d: any) => d.source.y)\n      .attr('class', 'mask')\n      .attr('stroke-width', 4)\n      .attr('stroke', 'transparent');\n\n    svgLinks\n      .append('text')\n      .attr('class', 'edgeLabel hidden')\n      .attr(\n        'transform',\n        (d: any) =>\n          `translate(${(d.target.x + d.source.x) / 2}, ${\n            (d.source.y + d.target.y) / 2\n          })`\n      )\n      .text((d: any) => d.edgeInfo);\n\n    let svgNodes = d3\n      .select('svg.graph')\n      .select('g.nodes')\n      .selectAll('g.nodeGroup')\n      .data(nodes, (d: any) => d.id)\n      .join(\n        (enter) =>\n          enter\n            .append('g')\n            .attr('class', 'nodeGroup')\n            .attr('transform', (d) => {\n              return `translate(${d.x || width / 2}, ${d.y || height / 2})`;\n            }) // ensure d.x is not undefined when first entering\n            .attr('cursor', 'pointer')\n            .call(\n              d3\n                .drag<SVGGElement, INode>()\n                .on('start', this.dragstarted.bind(this))\n                .on('drag', this.dragged.bind(this))\n                .on('end', this.dragended.bind(this))\n            ),\n\n        (update) =>\n          update.attr('transform', (d) => `translate(${d.x}, ${d.y})`),\n\n        (exit) => exit.remove()\n      );\n\n    svgNodes\n      .append('circle')\n      // .filter(d=>!drugTargets.includes(d.id))\n      .attr('r', this.RADIUS)\n      // .attr(\"r\", 5)\n      .attr('class', 'node')\n      .attr('id', (d) => d.id)\n      .attr('fill', (d: INode) => getNodeColor(d.nodeType))\n      .attr('stroke', 'white');\n\n    // add label to all nodes\n    svgNodes\n      .append('text')\n      .attr('class', 'nodeLabel')\n      .attr('transform', `translate(${-1 * this.RADIUS}, ${-2 * this.RADIUS} )`)\n      .text((d) => nodeNameDict[d.nodeType][d.nodeId])\n      .classed('hidden', true);\n\n    svgNodes\n      .filter((d) => this.isTargetNode(d) || this.isHighlighted(d))\n      .select('text.nodeLabel')\n      .classed('hidden', false);\n\n    // toggle node visibility through click\n    svgNodes.on('click', function (d) {\n      const textlabel = d3.select(this).select('text.nodeLabel');\n      const isHidden = textlabel.classed('hidden');\n      textlabel.classed('hidden', !isHidden);\n    });\n\n    this.simulation.nodes(nodes);\n    this.simulation.force<d3.ForceLink<INode, ILink>>('link')!.links(links);\n    this.simulation.on('tick', () => this.ticked(svgNodes, svgLinks));\n  }\n\n  updateNodeLabel() {\n    let svgNodes: d3.Selection<\n      SVGGElement,\n      INode,\n      d3.BaseType,\n      any\n    > = d3.select('svg.graph').select('g.nodes').selectAll('g.nodeGroup');\n\n    svgNodes\n      .filter((d) => this.isTargetNode(d) || this.isHighlighted(d))\n      .select('text.nodeLabel')\n      .classed('hidden', false);\n  }\n\n  componentDidMount() {\n    this.drawGraph();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      metaPathGroups: prevGroups,\n      selectedPathNodes: prevNodes,\n    } = prevProps.globalState;\n    const {\n      metaPathGroups: currGroups,\n      selectedPathNodes: currNodes,\n    } = this.props.globalState;\n    if (Object.keys(prevGroups).length !== Object.keys(currGroups).length) {\n      this.drawGraph();\n      this.simulation.alpha(0.5).restart();\n    }\n    if (\n      prevNodes.map((d) => d.nodeId).join() !==\n      currNodes.map((d) => d.nodeId).join()\n    ) {\n      this.updateNodeLabel();\n    }\n    return false;\n  }\n\n  render() {\n    const { width, height } = this.props;\n\n    const selectedDrugs = Object.keys(this.props.globalState.metaPathGroups);\n    const reminderText = (\n      <text transform={`translate(${width / 2}, ${height / 2})`} fill=\"gray\">\n        Please select a drug first\n      </text>\n    );\n\n    return (\n      <svg className=\"graph\" width={width} height={height}>\n        <g className=\"links\" />\n        <g className=\"nodes\" />\n        {selectedDrugs.length === 0 ? reminderText : <></>}\n      </svg>\n    );\n  }\n}\n","import { Tooltip, Modal } from 'antd';\nimport {\n  cropText,\n  YES_ICON,\n  NO_ICON,\n  SEARCH_ICON,\n  LOADING_ICON,\n} from 'helpers';\nimport { getNodeColor, SELECTED_COLOR } from 'helpers/color';\nimport { ACTION_TYPES, selectDrug, toggleMetaPathHide } from 'stores/actions';\nimport { isAddDrug } from 'stores/reducer';\nimport React from 'react';\n\nimport { StateConsumer } from 'stores';\nimport { IMetaPath, IMetaPathSummary, IState, IDispatch } from 'types';\nimport * as d3 from 'd3';\n\nimport './index.css';\n\ninterface Props {\n  width: number;\n  height: number;\n  globalState: IState;\n  dispatch: IDispatch;\n}\n\ninterface State {\n  expand: boolean[];\n  isModalVisible: boolean;\n}\n\nclass PathMatrix extends React.Component<Props, State> {\n  TITLE_HEIGHT = 36;\n  MARGIN = 10;\n  PADDING = 10;\n  EDGE_LENGTH = 120;\n  NODE_WIDTH = 130;\n  NODE_HEIGHT = 25;\n  VERTICAL_GAP = 5; // vertical gap between path\n  GROUP_GAP = 10; // vertical gap between path groups\n  COUNT_GAP = 5; // horizontal gap between count circles\n  RADIUS = this.NODE_HEIGHT / 2; // max radius of the count circle\n  HEAD_HEIGHT = 70; // height of the header ()\n  ICON_GAP = 20; // width of the expand triangle icon\n  offsetY = 0; // record the height of the expanded meta paths\n\n  constructor(prop: Props) {\n    super(prop);\n    this.state = {\n      expand: this.props.globalState.metaPathSummary.map((d) => false),\n      isModalVisible: false,\n    };\n\n    this.showModal = this.showModal.bind(this);\n    this.hideModal = this.hideModal.bind(this);\n    this.filterMetaPathGroups = this.filterMetaPathGroups.bind(this);\n  }\n  toggleExpand(idx: number, flag: undefined | boolean) {\n    let { expand } = this.state;\n    if (flag === undefined) {\n      expand[idx] = !expand[idx];\n    } else {\n      expand[idx] = flag;\n    }\n    this.setState({ expand });\n  }\n\n  isPathSelected(nodes: IMetaPath['nodes']) {\n    const { selectedPathNodes } = this.props.globalState;\n    const doesExist =\n      selectedPathNodes.map((d) => d.nodeId).join() ===\n        nodes.map((d) => d.nodeId).join() &&\n      selectedPathNodes.map((d) => d.nodeType).join() ===\n        nodes.map((d) => d.nodeType).join();\n    return doesExist;\n  }\n\n  togglePathNodes(nodes: IMetaPath['nodes'], doesExist: boolean) {\n    if (doesExist) {\n      this.props.dispatch({\n        type: ACTION_TYPES.Select_Path_Noes,\n        payload: { selectedPathNodes: [] },\n      });\n    } else {\n      this.props.dispatch({\n        type: ACTION_TYPES.Select_Path_Noes,\n        payload: { selectedPathNodes: nodes },\n      });\n    }\n  }\n  getMetaIconGroup(toggleHideFunc: (hide: boolean) => void, isHide: boolean) {\n    return (\n      <g\n        className=\"feedback\"\n        cursor=\"pointer\"\n        style={{ fill: '#777' }}\n        transform={`translate(5, 0)`}\n      >\n        <g\n          className=\"yes\"\n          transform={`translate(${0 * this.ICON_GAP}, 0)`}\n          onClick={() => toggleHideFunc(!isHide)}\n        >\n          <rect width={this.ICON_GAP} height={this.ICON_GAP} fill=\"white\" />\n          <path d={isHide ? YES_ICON : NO_ICON} transform={`scale(0.03)`} />\n        </g>\n      </g>\n    );\n  }\n  getIconGroup(nodes: IMetaPath['nodes']) {\n    const doesExist = this.isPathSelected(nodes);\n    return (\n      <g className=\"feedback\" cursor=\"pointer\" style={{ fill: '#777' }}>\n        {/* <g\n          className=\"search\"\n          transform={`translate(0, 0)`}\n          fill={doesExist ? 'red' : 'inherit'}\n          onClick={() => this.togglePathNodes(nodes, doesExist)}\n        >\n          <rect\n            width={this.ICON_GAP}\n            height={this.ICON_GAP}\n            fill=\"white\"\n            stroke=\"white\"\n          />\n          <path d={SEARCH_ICON} transform={`scale(0.018)`} />\n        </g> */}\n        {/* <g className=\"yes\" transform={`translate(${this.ICON_GAP}, 0)`}>\n          <rect width={this.ICON_GAP} height={this.ICON_GAP} fill=\"white\" />\n          <path d={YES_ICON} transform={`scale(0.03)`} />\n        </g>\n        <g className=\"no\" transform={`translate(${2 * this.ICON_GAP}, 0)`}>\n          <rect width={this.ICON_GAP} height={this.ICON_GAP} fill=\"white\" />\n          <path d={NO_ICON} transform={`scale(0.03)`} />\n        </g>\n        <g\n          className=\"edit\"\n          transform={`translate(${3 * this.ICON_GAP}, 0)`}\n          onClick={this.showModal}\n        >\n          <rect width={this.ICON_GAP} height={this.ICON_GAP} fill=\"white\" />\n          <path d={EDIT_ICON} transform={`scale(0.03)`} />\n        </g> */}\n      </g>\n    );\n  }\n  drawHeader() {\n    const { drugPredictions, nodeNameDict } = this.props.globalState;\n    const headerNames = drugPredictions.map(\n      (drug) => nodeNameDict['drug'][drug.id]\n    );\n    headerNames.push('SUM');\n\n    const header = headerNames.map((name, idx) => {\n      const isSelected =\n        idx > drugPredictions.length - 1\n          ? false\n          : drugPredictions[idx].selected;\n      return (\n        <text\n          key={name}\n          className={name}\n          fill={isSelected ? SELECTED_COLOR : 'gray'}\n          cursor=\"pointer\"\n          transform={`translate(\n            ${idx * (this.RADIUS * 2 + this.COUNT_GAP) + this.RADIUS}, \n            ${this.HEAD_HEIGHT}) \n            rotate(-45)`}\n          onClick={() => {\n            if (idx < drugPredictions.length)\n              this.onChangeDrug(drugPredictions[idx].id);\n          }}\n        >\n          {name}\n        </text>\n      );\n    });\n    return header;\n  }\n  getCountWidth() {\n    const width =\n      (this.props.globalState.drugPredictions.length + 1) *\n        (this.RADIUS * 2 + this.COUNT_GAP) +\n      this.COUNT_GAP;\n    return width;\n  }\n  drawSummary() {\n    let { EDGE_LENGTH, NODE_WIDTH, NODE_HEIGHT, VERTICAL_GAP } = this;\n\n    let { metaPathSummary, drugPredictions } = this.props.globalState;\n\n    const COUNT_WIDTH = this.getCountWidth();\n\n    let metaPathGroups = this.filterMetaPathGroups();\n    const triangleRight =\n        'M 9 17.879 V 6.707 A 1 1 0 0 1 10.707 6 l 5.586 5.586 a 1 1 0 0 1 0 1.414 l -5.586 5.586 A 1 1 0 0 1 9 17.879 Z',\n      triangelBottom =\n        'M 6.414 9 h 11.172 a 1 1 0 0 1 0.707 1.707 l -5.586 5.586 a 1 1 0 0 1 -1.414 0 l -5.586 -5.586 A 1 1 0 0 1 6.414 9 Z';\n\n    const maxCount = Math.max(...metaPathSummary.map((d) => d.count).flat());\n    const rScale = d3\n      .scaleLinear()\n      .range([this.RADIUS / 3, this.RADIUS])\n      .domain([0, maxCount]);\n\n    this.offsetY = 0;\n    const allRows = [...metaPathSummary]\n      .sort((a, b) => (a.hide ? 1 : 0) - (b.hide ? 1 : 0))\n      .map((summary) => {\n        let nodes = summary.nodeTypes.map((node, nodeIdx) => {\n          let translate = `translate(${\n            (EDGE_LENGTH + NODE_WIDTH) * nodeIdx\n          }, ${0})`;\n          return (\n            <g key={`node_${nodeIdx}`} transform={translate}>\n              <rect\n                width={NODE_WIDTH}\n                height={NODE_HEIGHT}\n                fill=\"white\"\n                strokeWidth=\"3\"\n                stroke={getNodeColor(node)}\n                rx={this.NODE_HEIGHT / 2}\n              />\n              <text\n                textAnchor=\"middle\"\n                y={NODE_HEIGHT / 2 + 6}\n                x={NODE_WIDTH / 2}\n                fill=\"black\"\n              >\n                {node}\n              </text>\n            </g>\n          );\n        });\n        let edges = [...Array(nodes.length - 1)].map((_, edgeIdx) => {\n          let translate = `translate(${\n            NODE_WIDTH + (EDGE_LENGTH + NODE_WIDTH) * edgeIdx\n          }, ${+NODE_HEIGHT / 2})`;\n          return (\n            <g key={`edge_${edgeIdx}`} transform={translate}>\n              <line\n                stroke=\"lightgray\"\n                // strokeWidth={1+Math.random() * 8}\n                strokeWidth={2}\n                x1={0}\n                y1={0}\n                x2={EDGE_LENGTH}\n                y2={0}\n              />\n            </g>\n          );\n        });\n        let currentY = this.offsetY;\n        this.offsetY += NODE_HEIGHT + VERTICAL_GAP;\n\n        let differentChildren: JSX.Element[] = [];\n        let childrenOffsetY = 0;\n        const showChildren = this.state.expand[summary.idx];\n\n        let lastMetaPath: IMetaPath | undefined = undefined;\n        Object.keys(metaPathGroups).forEach((drugId) => {\n          const metaPathGroup = metaPathGroups[drugId];\n          const metaPaths =\n            metaPathGroup.filter(\n              (d) => d.nodeTypes.join('') === summary.nodeTypes.join('')\n            )[0]?.metaPaths || [];\n\n          const drugRank = drugPredictions.map((d) => d.id).indexOf(drugId);\n          const children = this.drawChildrenPaths(\n            metaPaths,\n            drugRank,\n            lastMetaPath\n          );\n          lastMetaPath = metaPaths[metaPaths.length - 1];\n          const childrenHeight =\n            (NODE_HEIGHT + VERTICAL_GAP) * metaPaths.length;\n          differentChildren.push(\n            <g\n              key={`drugRank: ${drugRank}`}\n              className={`drugRank_${drugRank}`}\n              transform={`translate(0, ${childrenOffsetY})`}\n            >\n              {children}\n            </g>\n          );\n\n          childrenOffsetY += childrenHeight;\n          if (showChildren) {\n            this.offsetY += childrenHeight;\n          }\n\n          this.offsetY += this.GROUP_GAP;\n        });\n\n        const toggleHideFunc = (hide: boolean) => {\n          toggleMetaPathHide(\n            metaPathSummary,\n            summary.idx,\n            hide,\n            this.props.dispatch\n          );\n          if (hide) {\n            this.toggleExpand(summary.idx, false);\n          }\n        };\n\n        return (\n          <g\n            key={`prototype_${summary.idx}`}\n            transform={`translate(${0}, ${currentY})`}\n            opacity={summary.hide ? 0.4 : 1}\n          >\n            <g className=\"metaCount\">{this.drawMetaCount(summary, rScale)}</g>\n            <g className=\"icon\">\n              <path\n                d={showChildren ? triangelBottom : triangleRight}\n                transform={`translate(${COUNT_WIDTH}, 0)`}\n                fill=\"gray\"\n                onClick={() => {\n                  if (!summary.hide) this.toggleExpand(summary.idx, undefined);\n                }}\n                cursor=\"pointer\"\n              />\n            </g>\n            <g\n              className=\"prototype\"\n              transform={`translate(${COUNT_WIDTH + this.ICON_GAP}, 0)`}\n            >\n              {nodes}\n              {edges}\n              <g\n                className=\"iconGroup\"\n                transform={`translate(${\n                  NODE_WIDTH * nodes.length + EDGE_LENGTH * edges.length\n                }, 0)`}\n              >\n                {this.getMetaIconGroup(toggleHideFunc, summary.hide)}\n              </g>\n            </g>\n            <g className=\"metapaths\">\n              {showChildren ? differentChildren : <g />}\n            </g>\n          </g>\n        );\n      });\n    const header = this.drawHeader();\n    const content = (\n      <g>\n        <g\n          className=\"header\"\n          transform={`translate(${this.PADDING}, ${this.PADDING})`}\n        >\n          {header}\n        </g>\n        <g\n          className=\"rows\"\n          transform={`translate(${0}, ${this.PADDING + this.HEAD_HEIGHT})`}\n        >\n          {allRows}\n        </g>\n      </g>\n    );\n    return content;\n  }\n\n  onChangeDrug(selectedDrug: string) {\n    const isAdd = isAddDrug(\n      this.props.globalState.drugPredictions,\n      selectedDrug\n    );\n    selectDrug(\n      selectedDrug,\n      this.props.globalState.selectedDisease,\n      isAdd,\n      this.props.dispatch\n    );\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      // when disease changed, collapse all meta paths\n      prevProps.globalState.selectedDisease !==\n      this.props.globalState.selectedDisease\n    ) {\n      this.setState({\n        expand: this.props.globalState.metaPathSummary.map((d) => false),\n      });\n    } else if (\n      prevProps.globalState.drugPredictions.filter((d) => d.selected).length !==\n      this.props.globalState.drugPredictions.filter((d) => d.selected).length\n    ) {\n      // update expended metapaths when selected drug changes\n      const { metaPathSummary, drugPredictions } = this.props.globalState;\n\n      const expandStatus = metaPathSummary.map(\n        (d) =>\n          d.count.reduce(\n            (acc, cur, i) => acc + cur * (drugPredictions[i].selected ? 1 : 0),\n            0\n          ) > 0 && !d.hide\n      );\n      this.setState({ expand: expandStatus });\n    }\n  }\n\n  drawMetaCount(\n    summary: IMetaPathSummary,\n    rScale: d3.ScaleLinear<number, number>\n  ) {\n    const { drugPredictions } = this.props.globalState;\n    const { count, sum } = summary;\n    const vis = count.map((num, idx) => {\n      const isSelected = drugPredictions[idx].selected;\n      const content =\n        num === 0 ? (\n          <line\n            x1={0.5 * this.RADIUS}\n            x2={1.5 * this.RADIUS}\n            stroke={isSelected ? SELECTED_COLOR : 'lightgray'}\n          />\n        ) : (\n          <>\n            <circle\n              r={rScale(num)}\n              fill={isSelected ? SELECTED_COLOR : 'lightgray'}\n              xlinkTitle={num.toString()}\n              cx={this.RADIUS}\n            />\n            <text\n              textAnchor=\"middle\"\n              transform={`\n                translate(${this.RADIUS}, ${rScale(num) / 2}) \n              scale(${rScale(num) / this.RADIUS})\n              `}\n              fill={isSelected ? 'white' : 'black'}\n            >\n              {num}\n            </text>\n          </>\n        );\n      return (\n        <g\n          key={idx}\n          className=\"count\"\n          transform={`translate(${idx * (2 * this.RADIUS + this.COUNT_GAP)}, ${\n            this.NODE_HEIGHT / 2\n          })`}\n          cursor=\"pointer\"\n          onClick={() => this.onChangeDrug(drugPredictions[idx]['id'])}\n        >\n          {content}\n        </g>\n      );\n    });\n    return (\n      <g className=\"metaCount\" transform={`translate(${this.PADDING}, 0)`}>\n        {vis}\n        <g\n          className=\"sum\"\n          transform={`translate(${\n            count.length * (2 * this.RADIUS + this.COUNT_GAP)\n          }, 0)`}\n        >\n          <text\n            x={this.RADIUS}\n            y={this.NODE_HEIGHT / 2 + 6}\n            textAnchor=\"middle\"\n          >\n            {' '}\n            {`| ${sum}`}{' '}\n          </text>\n        </g>\n      </g>\n    );\n  }\n\n  drawChildrenPaths(\n    metaPaths: IMetaPath[],\n    drugRank: number,\n    prevPath: IMetaPath | undefined\n  ) {\n    const { nodeNameDict, edgeTypes } = this.props.globalState;\n    const COUNT_WIDTH = this.getCountWidth();\n    const children = metaPaths.map((path, childIdx) => {\n      const nodes = path.nodes.map((node, nodeIdx) => {\n        const { nodeId, nodeType } = node;\n        const nodeName = nodeNameDict[nodeType][nodeId];\n\n        let prevNodeName = '';\n        if (childIdx > 0) {\n          prevPath = metaPaths[childIdx - 1];\n        }\n        if (prevPath !== undefined) {\n          const { nodeId: prevNodeId, nodeType: prevNodeType } = prevPath.nodes[\n            nodeIdx\n          ];\n          prevNodeName = nodeNameDict[prevNodeType][prevNodeId];\n        }\n\n        let shortNodeName =\n          nodeName === prevNodeName\n            ? '〃'\n            : cropText(nodeName, 14, this.NODE_WIDTH - 10) || 'undefined';\n\n        let translate = `translate(${\n          (this.EDGE_LENGTH + this.NODE_WIDTH) * nodeIdx\n        }, ${0})`;\n\n        return (\n          <Tooltip\n            key={`node_${nodeIdx}`}\n            title={shortNodeName.includes('.') ? nodeName : ''}\n          >\n            <g\n              transform={translate}\n              className={`node_${nodeId}`}\n              style={{ cursor: 'pointer' }}\n              onClick={() =>\n                nodeType === 'drug' &&\n                window.open(\n                  `https://go.drugbank.com/drugs/${nodeId}`,\n                  'windowName',\n                  'popup,right=10,top=10,width=320,height=600'\n                )\n              }\n            >\n              <rect\n                width={this.NODE_WIDTH}\n                height={this.NODE_HEIGHT}\n                fill={getNodeColor(nodeType)}\n              />\n              <text\n                textAnchor=\"middle\"\n                y={this.NODE_HEIGHT / 2 + 6}\n                x={this.NODE_WIDTH / 2}\n                fill=\"white\"\n              >\n                {shortNodeName}\n              </text>\n            </g>\n          </Tooltip>\n        );\n      });\n      const edges = path.edges.map((edge, edgeIdx) => {\n        const translate = `translate(${\n          this.NODE_WIDTH + (this.EDGE_LENGTH + this.NODE_WIDTH) * edgeIdx\n        }, ${+this.NODE_HEIGHT / 2})`;\n\n        let edgeName = edge.edgeInfo.replace('rev_', '');\n        edgeName = edgeTypes[edgeName]?.edgeInfo || edgeName;\n        const edgeShortName = cropText(edgeName, 14, this.EDGE_LENGTH);\n        return (\n          <Tooltip\n            title={edgeShortName === edgeName ? '' : edgeName}\n            destroyTooltipOnHide\n          >\n            <g\n              key={`edge_${edgeIdx}`}\n              transform={translate}\n              style={{ cursor: 'pointer' }}\n            >\n              <line\n                stroke=\"gray\"\n                strokeWidth={1 + edge.score * 0.7}\n                x1={0}\n                y1={this.NODE_HEIGHT / 4}\n                x2={this.EDGE_LENGTH}\n                y2={this.NODE_HEIGHT / 4}\n              />\n              <text x={this.EDGE_LENGTH / 2} y={0} textAnchor=\"middle\">\n                {edgeName}\n              </text>\n            </g>\n          </Tooltip>\n        );\n      });\n      return (\n        <g\n          key={childIdx}\n          transform={`translate(0, ${\n            (this.NODE_HEIGHT + this.VERTICAL_GAP) * (1 + childIdx)\n          })`}\n        >\n          <circle\n            cx={\n              drugRank * (2 * this.RADIUS + this.COUNT_GAP) +\n              this.RADIUS +\n              this.PADDING\n            }\n            cy={this.NODE_HEIGHT / 2}\n            fill={SELECTED_COLOR}\n            r={this.RADIUS / 3}\n          />\n          <g transform={`translate(${COUNT_WIDTH + this.ICON_GAP}, 0)`}>\n            {nodes}\n            {edges}\n            <g\n              className=\"iconGroup\"\n              transform={`translate(${\n                this.NODE_WIDTH * nodes.length + this.EDGE_LENGTH * edges.length\n              }, 0)`}\n            >\n              {this.getIconGroup(path.nodes)}\n            </g>\n          </g>\n        </g>\n      );\n    });\n    return children;\n  }\n  showModal() {\n    this.setState({ isModalVisible: true });\n  }\n  hideModal() {\n    this.setState({ isModalVisible: false });\n  }\n  filterMetaPathGroups() {\n    let { metaPathGroups, edgeThreshold } = this.props.globalState;\n    let filteredMetaGroups: IState['metaPathGroups'] = {};\n    Object.keys(metaPathGroups).forEach((k) => {\n      filteredMetaGroups[k] = metaPathGroups[k].map((metaPathGroup) => {\n        const metaPaths = metaPathGroup.metaPaths.filter((metaPath) =>\n          metaPath.edges.every((e) => e.score > edgeThreshold)\n        );\n        return { ...metaPathGroup, metaPaths };\n      });\n    });\n\n    Object.keys(filteredMetaGroups).forEach((k) => {\n      filteredMetaGroups[k] = filteredMetaGroups[k].filter(\n        (metaPathGroup) => metaPathGroup.metaPaths.length > 0\n      );\n    });\n\n    return filteredMetaGroups;\n  }\n  render() {\n    const { width, height } = this.props,\n      { isModalVisible } = this.state;\n    const {\n      isDrugLoading,\n      isAttentionLoading,\n      metaPathSummary,\n      selectedDisease,\n    } = this.props.globalState;\n\n    const svgWidth = Math.max(\n      width - 2 * this.PADDING - 2 * this.MARGIN,\n      this.getCountWidth() +\n        this.ICON_GAP * 5 +\n        this.NODE_WIDTH +\n        (this.EDGE_LENGTH + this.NODE_WIDTH) * 4\n    );\n\n    const svgOuterHeight = height - 2 * this.PADDING - this.TITLE_HEIGHT,\n      svgHeight = Math.max(\n        this.offsetY +\n          this.NODE_HEIGHT +\n          this.VERTICAL_GAP +\n          this.PADDING +\n          this.HEAD_HEIGHT,\n        svgOuterHeight\n      );\n\n    const reminderText = (\n      <text x={width / 2} y={height / 2} fill=\"gray\">\n        {isDrugLoading || isAttentionLoading\n          ? ''\n          : selectedDisease\n          ? 'There is no meta path'\n          : 'Please select a disease first'}\n      </text>\n    );\n\n    const metaPaths = this.drawSummary();\n    const content = metaPathSummary.length === 0 ? reminderText : metaPaths;\n    return (\n      <>\n        <svg width={svgWidth} height={svgHeight}>\n          {content}\n          {/* overlap loading icon when it is loading */}\n          {isDrugLoading ||\n          (isAttentionLoading && this.state.expand.some((d) => d)) ? (\n            <g transform={`translate(${svgWidth / 2}, ${svgOuterHeight / 2})`}>\n              {LOADING_ICON}\n            </g>\n          ) : (\n            <></>\n          )}\n        </svg>\n\n        <Modal\n          title=\"Edit Explanation\"\n          visible={isModalVisible}\n          onOk={this.hideModal}\n          onCancel={this.hideModal}\n          okText=\"Confirm\"\n          width={width}\n          zIndex={1999}\n        >\n          <svg width={width}></svg>\n        </Modal>\n      </>\n    );\n  }\n}\n\nexport default StateConsumer(PathMatrix);\n","import React from 'react';\nimport { Tabs } from 'antd';\nimport { StateConsumer } from 'stores';\nimport { IState, IDispatch } from 'types';\n\nimport AttentionTree from './AttentionTree';\nimport Graph from './Graph';\n\nimport './index.css';\nimport PathMatrix from 'components/TabContainer/PathMatrix';\n\nconst { TabPane } = Tabs;\n\ninterface Props {\n  width: number;\n  height: number;\n  globalState: IState;\n  dispatch: IDispatch;\n}\n\ninterface State {\n  activeTab: string;\n}\n\nclass NodeLink extends React.Component<Props, State> {\n  titleHeight = 36;\n  margin = 10;\n  padding = 10;\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      activeTab: 'metapath',\n    };\n  }\n  changeActiveTab(key: string) {\n    this.setState({ activeTab: key });\n  }\n\n  render() {\n    const { width, height } = this.props;\n    const cardWidth = width - 2 * this.margin - 2 * this.padding,\n      cardHeight =\n        height - 2 * this.padding - this.titleHeight - 2 * this.margin;\n\n    const props = { ...this.props, height: cardHeight, width: cardWidth };\n\n    return (\n      <Tabs\n        size=\"small\"\n        activeKey={this.state.activeTab}\n        style={{\n          width: width - 2 * this.margin,\n          height: height - 2 * this.margin,\n          margin: this.margin,\n          backgroundColor: 'white',\n        }}\n        tabBarStyle={{\n          height: this.titleHeight,\n          padding: '0px 10px',\n          margin: '0px',\n        }}\n        onChange={this.changeActiveTab.bind(this)}\n      >\n        <TabPane\n          style={{ padding: this.padding }}\n          key=\"metapath\"\n          tab=\"Meta-Path\"\n        >\n          <div\n            className=\"nodelink\"\n            style={{\n              width: cardWidth,\n              height: cardHeight,\n              overflowY: 'scroll',\n            }}\n          >\n            <PathMatrix {...props} />\n          </div>\n        </TabPane>\n\n        <TabPane\n          style={{ padding: this.padding }}\n          key=\"attention\"\n          tab=\"Node Attention\"\n        >\n          <div\n            className=\"nodelink\"\n            style={{\n              width: cardWidth,\n              height: cardHeight,\n              overflowY: 'scroll',\n            }}\n          >\n            <AttentionTree {...props} />\n          </div>\n        </TabPane>\n\n        <TabPane style={{ padding: this.padding }} key=\"graph\" tab=\"Sub-Graph\">\n          <div\n            className=\"nodelink\"\n            style={{\n              width: cardWidth,\n              height: cardHeight,\n              overflowY: 'scroll',\n            }}\n          >\n            <Graph {...props} />\n          </div>\n        </TabPane>\n      </Tabs>\n    );\n  }\n}\n\nexport default StateConsumer(NodeLink);\n","import React from 'react';\nimport { StateConsumer } from 'stores';\nimport { IDispatch, IState } from 'types';\nimport { ACTION_TYPES, selectDisease, selectDrug } from 'stores/actions';\n\nimport './Sider.css';\n\nimport { Col, InputNumber, Layout, Row, Select, Slider } from 'antd';\nimport { getNodeColor } from 'helpers/color';\nconst { Sider } = Layout;\nconst { Option } = Select;\n\ninterface Props {\n  siderWidth: number;\n  globalState: IState;\n  dispatch: IDispatch;\n}\n\nclass DrugSider extends React.Component<Props> {\n  padding = 10;\n  listHeight = 150; // height of the open drug list\n  constructor(props: Props) {\n    super(props);\n    this.changeEdgeTHR = this.changeEdgeTHR.bind(this);\n    this.onChangeDisease = this.onChangeDisease.bind(this);\n    this.onChangeDrug = this.onChangeDrug.bind(this);\n  }\n  onChangeDrug(selectedDrugs: string[]) {\n    const prevSelectedDrugs = this.props.globalState.drugPredictions\n      .filter((d) => d.selected)\n      .map((d) => d.id);\n    const isAdd = selectedDrugs.length > prevSelectedDrugs.length;\n\n    const currentDrug = isAdd\n      ? selectedDrugs[selectedDrugs.length - 1]\n      : prevSelectedDrugs.filter((d) => !selectedDrugs.includes(d))[0];\n    selectDrug(\n      currentDrug,\n      this.props.globalState.selectedDisease,\n      isAdd,\n      this.props.dispatch\n    );\n  }\n  changeEdgeTHR(value: number | undefined | string) {\n    if (typeof value == 'number') {\n      this.props.dispatch({\n        type: ACTION_TYPES.Change_Edge_THR,\n        payload: { edgeThreshold: value },\n      });\n    }\n  }\n\n  onChangeDisease(selectedDisease: string) {\n    selectDisease(selectedDisease, this.props.dispatch);\n  }\n  render() {\n    let { siderWidth } = this.props;\n    let {\n      edgeThreshold,\n      nodeTypes,\n      diseaseOptions,\n      drugPredictions,\n      nodeNameDict,\n      selectedDisease,\n    } = this.props.globalState;\n    const defaultDiseaseText = 'Select a disease';\n    const defaultDrugText = 'Select a drug from the prediction';\n    const selectedDrugIds = drugPredictions\n      .filter((d) => d.selected)\n      .map((d) => d.id);\n\n    let sider = (\n      <Sider\n        width={siderWidth}\n        theme=\"light\"\n        style={{ padding: `${this.padding}px` }}\n      >\n        Disease:\n        <Select\n          defaultValue={defaultDiseaseText}\n          style={{ width: siderWidth - 2 * this.padding }}\n          onChange={this.onChangeDisease}\n          showSearch\n          optionFilterProp=\"label\"\n        >\n          {diseaseOptions.length > 0 ? (\n            diseaseOptions.map((d) => {\n              const name = nodeNameDict['disease'][d];\n              return (\n                <Option value={d} label={name} key={`diseaseID_${d}`}>\n                  {name}\n                </Option>\n              );\n            })\n          ) : (\n            <Option value=\"loading\" label=\"loading\" key=\"loading\">\n              data is loading..\n            </Option>\n          )}\n        </Select>\n        <br />\n        Drug:\n        <Select\n          mode=\"multiple\"\n          style={{ width: siderWidth - 2 * this.padding }}\n          open\n          showSearch\n          optionFilterProp=\"label\"\n          listHeight={this.listHeight}\n          onChange={this.onChangeDrug}\n          placeholder={defaultDrugText}\n          value={selectedDrugIds}\n        >\n          {selectedDisease !== undefined ? (\n            drugPredictions.length > 0 ? (\n              drugPredictions.map((d, idx) => {\n                const { id: drug_id, score } = d;\n                const name = nodeNameDict['drug'][drug_id];\n                return (\n                  <Option value={drug_id} key={`disease_${idx}`} label={name}>\n                    <div>\n                      <span>{name}</span>\n                      <span style={{ float: 'right' }}>\n                        {/* score: {score.toFixed(3)} */}\n                        rank: {idx + 1}\n                      </span>\n                    </div>\n                  </Option>\n                );\n              })\n            ) : (\n              <Option value=\"loading\" label=\"loading\" key=\"loading\">\n                data is loading..\n              </Option>\n            )\n          ) : (\n            <Option value=\"noDisease\" label=\"noDisease\" key=\"noDisease\">\n              please select a disease first\n            </Option>\n          )}\n        </Select>\n        <div className=\"dummy\" style={{ height: this.listHeight + 20 }} />\n        Edge Threshold:\n        <Row>\n          <Col span={16}>\n            <Slider\n              step={0.1}\n              value={edgeThreshold}\n              min={0}\n              max={1.5}\n              onChange={this.changeEdgeTHR}\n            />\n          </Col>\n          <Col span={4}>\n            <InputNumber\n              value={edgeThreshold}\n              onChange={this.changeEdgeTHR}\n              step={0.1}\n            />\n          </Col>\n        </Row>\n        <div className=\"nodeTypes\">\n          Node Types:\n          <br />\n          {nodeTypes.map((nodeType) => {\n            return (\n              <div key={nodeType} style={{ marginLeft: '5px' }}>\n                {/* <input type=\"checkbox\" style={{ margin: \"2px\" }} /> */}\n                <span\n                  style={{\n                    background: getNodeColor(nodeType),\n                    color: 'white',\n                    padding: '2px',\n                  }}\n                >\n                  {nodeType}\n                </span>\n              </div>\n            );\n          })}\n        </div>\n        <br />\n        {/* <Button\n          icon={<SearchOutlined />}\n          type=\"primary\"\n          shape=\"round\"\n          onClick={() => this.startAnalysis()}\n        >\n          Show Attention Tree\n        </Button> */}\n        <br />\n      </Sider>\n    );\n\n    return sider;\n  }\n}\n\nexport default StateConsumer(DrugSider);\n","import React from 'react';\nimport PathMatrix from 'components/CardContainer';\nimport NodeLink from 'components/TabContainer';\nimport DrugSider from 'components/Sider';\n\nimport { Layout } from 'antd';\nimport './App.css';\nimport { StateConsumer } from 'stores';\nimport { IState, IDispatch } from 'types';\nimport { ACTION_TYPES } from 'stores/actions';\nimport {\n  requestNodeTypes,\n  requestEdgeTypes,\n  requestNodeNameDict,\n  requestDiseaseOptions,\n} from 'stores/DataService';\nimport { setNodeColor } from 'helpers/color';\n\nconst { Header, Footer, Content } = Layout;\n\ninterface Props {\n  globalState: IState;\n  dispatch: IDispatch;\n}\ninterface State {\n  width: number;\n  height: number;\n}\n\nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n\n    this.updateSize = this.updateSize.bind(this);\n  }\n\n  updateSize() {\n    this.setState({\n      width: window.innerWidth,\n      height: window.innerHeight,\n    });\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.updateSize);\n\n    requestNodeTypes()\n      .then((nodeTypes) => {\n        setNodeColor(nodeTypes);\n        this.props.dispatch({\n          type: ACTION_TYPES.Load_Node_Types,\n          payload: { nodeTypes },\n        });\n      })\n      .then(() => requestEdgeTypes())\n      .then((edgeTypes) => {\n        this.props.dispatch({\n          type: ACTION_TYPES.Load_Edge_Types,\n          payload: { edgeTypes },\n        });\n      })\n      .then(() => requestNodeNameDict())\n      .then((nodeNameDict) => {\n        this.props.dispatch({\n          type: ACTION_TYPES.Load_Node_Name_Dict,\n          payload: { nodeNameDict },\n        });\n      })\n      .then(() => requestDiseaseOptions())\n      .then((diseaseOptions) => {\n        this.props.dispatch({\n          type: ACTION_TYPES.Load_Disease_Options,\n          payload: { diseaseOptions },\n        });\n      });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateSize);\n  }\n\n  render() {\n    let siderWidth = 300,\n      mainViewWidth = window.innerWidth - siderWidth,\n      headerHeight = 64,\n      mainViewHeight = window.innerHeight - headerHeight,\n      NodeLinkHeight = mainViewHeight * 0.55,\n      MatrixHeight = mainViewHeight - NodeLinkHeight;\n\n    let header = (\n      <Header className=\"header\" style={{ height: headerHeight }}>\n        DrugExplorer\n      </Header>\n    );\n\n    return (\n      <Layout>\n        {header}\n\n        <Layout>\n          <DrugSider siderWidth={siderWidth} />\n          <Content className=\"main\" style={{ height: mainViewHeight }}>\n            <PathMatrix width={mainViewWidth} height={MatrixHeight} />\n            <NodeLink width={mainViewWidth} height={NodeLinkHeight} />\n          </Content>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport default StateConsumer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\nimport { StateProvider } from 'stores';\n\nReactDOM.render(\n  <StateProvider>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </StateProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}